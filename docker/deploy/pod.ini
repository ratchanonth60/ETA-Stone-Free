[uwsgi]
socket = /var/www/pod/pod.sock
chdir = /application
chmod-socket = 666
module = pod.wsgi
master = true
route = ^/watchman/ donotlog:
stats = /tmp/stats.sock

# https://www.techatbloomberg.com/blog/configuring-uwsgi-production-deployment/
vacuum = true                          ; Delete sockets during shutdown
single-interpreter = true
die-on-term = true                     ; Shutdown when receiving SIGTERM (default is respawn)
need-app = true
die-on-term = true
memory-report = false

# memory management
max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 512                 ; Restart workers after this much resident memory

harakiri = 90                        ; Forcefully kill workers after 90 seconds
py-call-osafterfork = true

buffer-size = 8192                   ; increate buffer size since some view have very long qs

[production]
ini = :uwsgi

# set cheaper algorithm to use, if not set default will be used
plugin-dir=/application
need-plugin=cheaper_spare2
cheaper-algo=spare2

# minimum number of workers to keep at all times
cheaper = 2

# number of workers to spawn at startup
cheaper-initial = 2

# maximum number of workers that can be spawned
workers = 6

# cheap one worker gper minute while idle
cheaper-idle = 60

# how many workers should be spawned at a time
cheaper-step = 2

# don't spawn new workers if total resident memory usage of  all  workers  is  higher than this limit
cheaper-rss-limit-soft = 1200000000                 ; set 60% of 2024mb
cheaper-rss-limit-hard = 1400000000

threads = 2
enable-threads = True

# cheaper-algo = busyness              
# processes = 2                      ; Maximum number of workers allowed
# cheaper = 1                         ; Minimum number of workers allowed
# cheaper-initial = 2                 ; Workers created at startup
# cheaper-overload = 10               ; Length of a cycle in seconds
# cheaper-step = 1                    ; How many workers to spawn at a time
# threads = 2

# cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
# cheaper-busyness-min = 25            ; Below this threshold, kill workers (if stable for multiplier cycles)
# cheaper-busyness-max = 50            ; Above this threshold, spawn new workers
# cheaper-busyness-backlog-alert = 4   ; Spawn emergency workers if more than this many requests are waiting in the queue
# cheaper-busyness-backlog-step = 1    ; How many emergegency workers to create if there are too many requests in the queue

